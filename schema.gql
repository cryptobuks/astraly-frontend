# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  _id: ID!
  address: String
  alias: String
  avatar: String
  bannerHash: String
  bio: String
  cover: String
  email: String
  hasClaimedTickets: Boolean
  questCompleted: [Quest!]
  socialLinks: [SocialLink!]
  transactions: [Transaction!]
}

type CallData {
  name: String
  type: String
  value: CallDataValue
}

input CallDataInput {
  name: String
  type: String
  value: CallDataValueInput
}

union CallDataValue = Felt | Uint256

input CallDataValueInput {
  high: Float
  low: Float
  value: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Felt {
  value: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  addContact(email: String!): Boolean!
  completeQuest(questId: String!): Quest
  linkSocial(id: String, type: String!): Account!
  newsletter(email: String!, form: String = "footer"): Boolean!
  updateAccount(data: UpdateAccountInputType!): Account!
  updateProject(data: ProjectInput!): Project
  updateQuest(data: QuestInput!): Quest!
}

type OrganizedEvent {
  callData: [CallData!]
  name: String
  transmitterContract: String
}

input OrganizedEventInput {
  callData: [CallDataInput!]
  name: String
  transmitterContract: String
}

type Project {
  _id: ID!
  categories: [String!]
  cover: String
  coverVideo: String
  created: DateTime
  currentRoundIndex: Float
  description: String
  idoId: String
  isFinished: Boolean
  logo: String
  name: String
  quests: [Quest!]
  rounds: [Round!]
  ticker: String
  tokenAddress: String
  tokenPrice: Float
  totalClaimedTickets: Float
  totalRaise: Float
  tx: String
  type: ProjectType
}

input ProjectInput {
  _id: ID
  categories: [String!]
  cover: String
  created: DateTime
  currentRoundId: ID
  description: String
  idoId: String!
  logo: String
  maxAllocation: Float
  name: String
  rounds: [RoundInput]
  ticker: String
  tokenAddress: String
  tokenPrice: Float
  totalRaise: Float
  tx: String
  type: ProjectType
  voteCount: Float
}

enum ProjectType {
  GDA
  IDO
  INO
  LBP
}

type Query {
  getAccount(address: String!): Account!
  getMerkleProof(idoId: String!): [String!]!
  getToken(address: String!): String!
  getTwitterAuthUrl: String!
  getUploadUrl(fileType: String!): JSON!
  hello: String!
  isAdmin: Boolean!
  me: Account!
  project(idoId: String!): Project!
  projects: [Project!]!
  quest(_id: String!): Quest!
  quests(idoId: String): [Quest!]!
  searchProjects(finished: Boolean, search: String): [Project!]!
  total: Float!
}

type Quest {
  _id: ID!
  description: String
  event: OrganizedEvent
  icon: String
  idoId: Float
  isClaimed: Boolean
  link: String
  name: String
  type: QuestType
}

input QuestInput {
  _id: String
  description: String
  event: OrganizedEventInput
  icon: String
  idoId: Float
  isClaimed: Boolean
  link: String
  name: String
  type: QuestType
}

enum QuestType {
  PRODUCT
  SOCIAL
}

type Round {
  description: String
  endDate: DateTime
  startDate: DateTime
  title: String
}

input RoundInput {
  _id: ID
  description: String
  endDate: DateTime
  startDate: DateTime
  title: String
}

type SocialLink {
  id: String
  type: SocialLinkType
}

enum SocialLinkType {
  DISCORD
  FACEBOOK
  TELEGRAM
  TWITTER
}

type Transaction {
  _id: ID!
  callerAddress: String
  contractAddress: String
  hash: String
  name: String
  timestamp: DateTime
}

type Uint256 {
  high: Float
  low: Float
}

input UpdateAccountInputType {
  alias: String
  avatar: String
  bio: String
  cover: String
  email: String
}
